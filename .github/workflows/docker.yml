name: Docker

on:
  schedule:
    - cron: '0 3 * * 3,6' # Every Wednesday and Saturday at 03:00 UTC
  push:
    branches:
      - main
    paths:
      - '.github/workflows/docker.yml'
      - 'Dockerfile'
      - 'tools/build-linux-release.sh'
  pull_request:
    paths:
      - '.github/workflows/docker.yml'
      - 'Dockerfile'
      - 'tools/build-linux-release.sh'
  workflow_call:
    inputs:
      tag:
        description: 'Docker tag'
        required: true
        type: string

jobs:
  set-context:
    name: Set Context
    runs-on: ubuntu-24.04
    permissions: {}
    outputs:
      checkout-ref: ${{ steps.vars.outputs.checkout-ref }}
      docker-tag: ${{ steps.vars.outputs.docker-tag }}
      repository-lc: ${{ steps.vars.outputs.repository-lc }}
    steps:
    - name: Define variables
      id: vars
      run: |
        if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "push" ]]; then
          {
            echo "checkout-ref=main"
            echo "docker-tag=latest"
          } >> "$GITHUB_OUTPUT"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          {
            echo "checkout-ref=pr"
            echo "docker-tag=pr-${{ github.event.pull_request.number }}"
          } >> "$GITHUB_OUTPUT"
        else
          {
            echo "checkout-ref=${{ inputs.tag }}"
            echo "docker-tag=${{ inputs.tag }}"
          } >> "$GITHUB_OUTPUT"
        fi
        echo "repository-lc=${REPOSITORY,,}" >> "$GITHUB_OUTPUT"
      env:
        REPOSITORY: ${{ github.repository }}

  build:
    name: Build Image
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    needs: set-context
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
    - uses: actions/checkout@v4
      if: needs.set-context.outputs.checkout-ref == 'pr'
    - uses: actions/checkout@v4
      if: needs.set-context.outputs.checkout-ref != 'pr'
      with:
        ref: ${{ needs.set-context.outputs.checkout-ref }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub registry
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io
    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: ${{ matrix.platform }}
        outputs: >-
          type=image,
          name=ghcr.io/${{ needs.set-context.outputs.repository-lc }},
          push-by-digest=true,
          name-canonical=true,
          push=true
        cache-from: >-
          type=gha,
          scope=build-${{ strategy.job-index }}
        cache-to: >-
          type=gha,
          mode=max,
          scope=build-${{ strategy.job-index }}
    - name: Export digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ strategy.job-index }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  merge:
    name: Create Multi-Platform Image
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    needs:
      - set-context
      - build
    steps:
    - name: Download digests
      uses: actions/download-artifact@v4
      with:
        path: /tmp/digests
        pattern: digests-*
        merge-multiple: true
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub registry
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io
    - name: Create manifest list and push
      working-directory: /tmp/digests
      run: >-
        docker buildx imagetools create
        -t "ghcr.io/${{ needs.set-context.outputs.repository-lc }}:${{ needs.set-context.outputs.docker-tag }}"
        $(printf 'ghcr.io/${{ needs.set-context.outputs.repository-lc }}@sha256:%s ' *)
