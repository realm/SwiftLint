trigger:
- master

jobs:
- job: linux
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    maxParallel: 10
    matrix:
      swift51:
        containerImage: swift:5.1
      swift52:
        containerImage: swift:5.2
      swift53:
        containerImage: swift:5.3
  container: $[ variables['containerImage'] ]
  steps:
    - script: swift test --parallel
      displayName: swift test

- job: Xcode
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    maxParallel: 10
    matrix:
      xcode110:
        DEVELOPER_DIR: /Applications/Xcode_11.app
      xcode111:
        DEVELOPER_DIR: /Applications/Xcode_11.1.app
      xcode112:
        DEVELOPER_DIR: /Applications/Xcode_11.2.1.app
      xcode113:
        DEVELOPER_DIR: /Applications/Xcode_11.3.1.app
      xcode114:
        DEVELOPER_DIR: /Applications/Xcode_11.4.app
      xcode115:
        DEVELOPER_DIR: /Applications/Xcode_11.5.app
      xcode116:
        DEVELOPER_DIR: /Applications/Xcode_11.6.app
      xcode12:
        DEVELOPER_DIR: /Applications/Xcode_12.app
  steps:
    - script: git submodule update --init --recursive
      displayName: Update git submodules
    - script: |
        sw_vers
        xcodebuild -version
      displayName: Version Informations
    - script: >
        set -o pipefail &&
        xcodebuild -workspace SwiftLint.xcworkspace -scheme swiftlint test |
        xcpretty -r junit -o build/reports/xcodebuild.xml
      displayName: xcodebuild test
    - script: bash <(curl -s https://codecov.io/bash)
      displayName: Export code coverage
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: build/reports/**
      condition: succeededOrFailed()

- job: SwiftPM
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    maxParallel: 10
    matrix:
      xcode110:
        DEVELOPER_DIR: /Applications/Xcode_11.app
      xcode111:
        DEVELOPER_DIR: /Applications/Xcode_11.1.app
      xcode112:
        DEVELOPER_DIR: /Applications/Xcode_11.2.1.app
      xcode113:
        DEVELOPER_DIR: /Applications/Xcode_11.3.1.app
      xcode114:
        DEVELOPER_DIR: /Applications/Xcode_11.4.app
      xcode115:
        DEVELOPER_DIR: /Applications/Xcode_11.5.app
      xcode116:
        DEVELOPER_DIR: /Applications/Xcode_11.6.app
      xcode12:
        DEVELOPER_DIR: /Applications/Xcode_12.app
  steps:
    - script: |
        sw_vers
        xcodebuild -version
      displayName: Version Informations
    - script: >
        set -o pipefail &&
        swift test --parallel
      displayName: swift test

- job: CocoaPods
  pool:
    vmImage: 'macOS-10.15'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_12.app
  steps:
    - script: bundle install --path vendor/bundle
      displayName: bundle install
    - script: bundle exec pod repo update
      displayName: pod repo update
    - script: bundle exec pod lib lint --verbose SwiftLintFramework.podspec
      displayName: pod lib lint

- job: Analyze
  pool:
    vmImage: 'macOS-10.15'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_12.app
  steps:
    - script: make analyze
      displayName: Run SwiftLint Analyze

- job: TSan
  pool:
    vmImage: 'macOS-10.15'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_12.app
  steps:
    - script: swift run --sanitize=thread swiftlint lint --lenient
      displayName: Pre-cache SwiftLint Run
    - script: swift run --sanitize=thread swiftlint lint --lenient
      displayName: Post-cache SwiftLint Run
    - script: make test_tsan
      displayName: Test With TSan

- job: jazzy
  pool:
    vmImage: 'macOS-10.15'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_12.app
  steps:
    - script: swift run swiftlint generate-docs
      displayName: Run swiftlint generate-docs
    - script: bundle install --path vendor/bundle
      displayName: bundle install
    - script: bundle exec jazzy
      displayName: Run jazzy
    - script: >
        if ruby -rjson -e "j = JSON.parse(File.read('docs/undocumented.json')); exit j['warnings'].length != 0"; then
          echo "Undocumented declarations:"
          cat docs/undocumented.json
          exit 1
        fi
      displayName: Validate documentation coverage
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'API Docs'
        targetPath: 'docs'
    - task: DownloadSecureFile@1
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        secureFile: doc_deploy_key
    - script: ./script/push-docs
      displayName: Publish
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
