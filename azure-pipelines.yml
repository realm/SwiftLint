trigger:
- master

jobs:
- job: linux
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    maxParallel: 10
    matrix:
      swift50:
        containerImage: swift:5.0
      swift51:
        containerImage: swift:5.1
  container: $[ variables['containerImage'] ]
  steps:
    - script: swift test --parallel
      displayName: swift test

- job: Xcode
  pool:
    vmImage: 'macOS 10.14'
  strategy:
    maxParallel: 10
    matrix:
      xcode102:
        DEVELOPER_DIR: /Applications/Xcode_10.2.app
      xcode103:
        DEVELOPER_DIR: /Applications/Xcode_10.3.app
      xcode111:
        DEVELOPER_DIR: /Applications/Xcode_11.1.app
  steps:
    - script: git submodule update --init --recursive
      displayName: Update git submodules
    - script: |
        sw_vers
        xcodebuild -version
      displayName: Version Informations
    - script: >
        set -o pipefail &&
        xcodebuild -workspace SwiftLint.xcworkspace -scheme swiftlint test |
        xcpretty -r junit -o build/reports/xcodebuild.xml
      displayName: xcodebuild test
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: build/reports/**
      condition: succeededOrFailed()

- job: SwiftPM
  pool:
    vmImage: 'macOS 10.14'
  strategy:
    maxParallel: 10
    matrix:
      xcode102:
        DEVELOPER_DIR: /Applications/Xcode_10.2.app
      xcode103:
        DEVELOPER_DIR: /Applications/Xcode_10.3.app
      xcode111:
        DEVELOPER_DIR: /Applications/Xcode_11.1.app
  steps:
    - script: |
        sw_vers
        xcodebuild -version
      displayName: Version Informations
    - script: >
        set -o pipefail &&
        swift test --parallel
      displayName: swift test

- job: CocoaPods
  pool:
    vmImage: 'macOS 10.14'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_11.1.app
  steps:
    - script: bundle install --path vendor/bundle
      displayName: bundle install
    - script: bundle exec pod repo update
      displayName: pod repo update
    - script: bundle exec pod lib lint --verbose SwiftLintFramework.podspec
      displayName: pod lib lint

- job: Analyze
  pool:
    vmImage: 'macOS 10.14'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_11.1.app
  steps:
    - script: make analyze
      displayName: Run SwiftLint Analyze

- job: TSan
  pool:
    vmImage: 'macOS 10.14'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_11.1.app
  steps:
    - script: swift run --sanitize=thread swiftlint lint --lenient
      displayName: Pre-cache SwiftLint Run
    - script: swift run --sanitize=thread swiftlint lint --lenient
      displayName: Post-cache SwiftLint Run
    - script: make test_tsan
      displayName: Test With TSan

- job: jazzy
  pool:
    vmImage: 'Ubuntu 16.04'
  container: norionomura/jazzy:0.13.0_swift-5.1.3
  steps:
    - script: swift run swiftlint generate-docs
      displayName: Run swiftlint generate-docs
    - script: bundle install --path vendor/bundle
      displayName: bundle install
    - script: sourcekitten doc --spm-module SwiftLintFramework > docs.json
      displayName: Generate documentation json
    - script: bundle exec jazzy --sourcekitten-sourcefile docs.json
      displayName: Run jazzy
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'API Docs'
        targetPath: 'docs'
    - task: DownloadSecureFile@1
      inputs:
        secureFile: doc_deploy_key
      displayName: Get the deploy key
    - script: |
        mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
        chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

        local source_sha="$(git rev-parse HEAD)"
        local user="swiftlintbot@jpsim.com"
        git config --global user.email "$user"
        git config --global user.name "$user"
        git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/realm/SwiftLint.git" out

        cd out
        git checkout gh-pages
        git rm -rf .
        rm -rf Carthage
        cd ..

        cp -a docs/. out/.
        cd out

        git add -A
        git commit -m "Automated deployment to GitHub Pages: ${source_sha}" --allow-empty

        git push origin gh-pages
      displayName: Publish
