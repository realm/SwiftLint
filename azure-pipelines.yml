trigger:
- main

jobs:
- job: Sourcery
  pool:
    vmImage: 'macOS-12'
  steps:
    - script: brew install sourcery
      displayName: Install Sourcery
    - script: make --always-make sourcery
      displayName: Generate sources
    - script: "! git diff -U0 | grep '^[-+][^-+]' | grep --invert-match '// Generated using Sourcery'"
      displayName: Check changed files ignoring Sourcery's version

- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    maxParallel: 10
    matrix:
      swift57:
        containerImage: swift:5.7
  container: $[ variables['containerImage'] ]
  steps:
    - script: swift test --parallel -Xswiftc -DDISABLE_FOCUSED_EXAMPLES
      displayName: swift test

# TODO: Re-enable when FB11648454 is fixed
# - job: Xcode
#   pool:
#     vmImage: 'macOS-12'
#   strategy:
#     maxParallel: 10
#     matrix:
#       xcode14:
#         DEVELOPER_DIR: /Applications/Xcode_14.0.1.app
#   steps:
#     - script: |
#         sw_vers
#         xcodebuild -version
#       displayName: Version Informations
#     - script: xcodebuild -scheme swiftlint test -destination "platform=macOS" OTHER_SWIFT_FLAGS="\$(inherited) -D DISABLE_FOCUSED_EXAMPLES"
#       displayName: xcodebuild test

- job: SwiftPM
  pool:
    vmImage: 'macOS-12'
  strategy:
    maxParallel: 10
    matrix:
      xcode14:
        DEVELOPER_DIR: /Applications/Xcode_14.0.1.app
  steps:
    - script: |
        sw_vers
        xcodebuild -version
      displayName: Version Informations
    - script: swift test --parallel --enable-code-coverage -Xswiftc -DDISABLE_FOCUSED_EXAMPLES
      displayName: swift test
    # - script: |
    #     xcrun llvm-cov export -format="lcov" .build/debug/SwiftLintPackageTests.xctest/Contents/MacOS/SwiftLintPackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    #     bash <(curl -s https://codecov.io/bash)
    #   displayName: Upload code coverage
    #   condition: eq(variables['DEVELOPER_DIR'], '/Applications/Xcode_14.0.1.app')

- job: CocoaPods
  pool:
    vmImage: 'macOS-12'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_13.4.1.app
  steps:
    - script: bundle install --path vendor/bundle
      displayName: bundle install
    - script: bundle exec pod repo update
      displayName: pod repo update
    - script: bundle exec pod lib lint --verbose
      displayName: pod lib lint

- job: TSan
  pool:
    vmImage: 'macOS-12'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_14.0.1.app
  steps:
    - script: |
        curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.12.2/bazelisk-darwin-amd64 -o bazelisk
        chmod +x bazelisk
      displayName: Install Bazel
    - script: echo "build --remote_cache=grpc://$BAZEL_REMOTE_CREDENTIALS@swiftlint-ci.jpsim.com:9092" > ci.bazelrc
      env:
        BAZEL_REMOTE_CREDENTIALS: $(BAZEL_REMOTE_CREDENTIALS)
      displayName: Set CI Bazel flags
    - script: ./bazelisk build -c opt --features=tsan swiftlint
      displayName: Build SwiftLint
    - script: ./bazel-bin/swiftlint --lenient
      displayName: Pre-cache SwiftLint Run
    - script: ./bazel-bin/swiftlint --lenient
      displayName: Post-cache SwiftLint Run

- job: jazzy
  pool:
    vmImage: 'macOS-12'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_14.0.1.app
  steps:
    - script: swift run swiftlint generate-docs
      displayName: Run swiftlint generate-docs
    - script: bundle install --path vendor/bundle
      displayName: bundle install
    - script: bundle exec jazzy
      displayName: Run jazzy
    - script: >
        if ruby -rjson -e "j = JSON.parse(File.read('docs/undocumented.json')); exit j['warnings'].length != 0"; then
          echo "Undocumented declarations:"
          cat docs/undocumented.json
          exit 1
        fi
      displayName: Validate documentation coverage
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'API Docs'
        targetPath: 'docs'
    - task: DownloadSecureFile@1
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      inputs:
        secureFile: doc_deploy_key
    - script: ./tools/push-docs
      displayName: Publish
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
