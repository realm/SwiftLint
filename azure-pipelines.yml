trigger:
- main

variables:
  CI: 'true'

jobs:
- job: spm_linux
  displayName: 'SPM, Linux : Swift 6'
  pool:
    vmImage: 'ubuntu-24.04' # "Noble Numbat"
  container: swift:6.0-noble
  steps:
    - template: .azure/templates/run-make.yml
      parameters:
        rule: spm_test

- job: bazel_linux
  displayName: 'Bazel, Linux : Swift 6'
  pool:
    vmImage: 'ubuntu-24.04'
  steps:
    - script: |
        export PATH="/usr/share/swift/usr/bin:$PATH"
        git apply --ignore-whitespace .bcr/patches/no-warnings-as-errors.patch
        bazel build :swiftlint
      displayName: Build SwiftLint with Bazel
      env:
        CC: "clang"

- job: tests_macos
  displayName: 'Tests, macOS'
  strategy:
    maxParallel: '10'
    matrix:
      '14 : Xcode 15.4':
        image: 'macOS-14'
        xcode: '15.4'
      # '14 : Xcode 16.2': Runs on Buildkite.
      '15 : Xcode 15.4':
        image: 'macOS-15'
        xcode: '15.4'
      '15 : Xcode 16.2':
        image: 'macOS-15'
        xcode: '16.2'
  pool:
    vmImage: $(image)
  variables:
    DEVELOPER_DIR: /Applications/Xcode_$(xcode).app
  steps:
    - script: make spm_test
      displayName: Run tests

- job: plugins_linux # Plugins shall be able to run on older Swift versions.
  displayName: 'Plugins, Linux'
  pool:
    vmImage: 'ubuntu-24.04' # "Noble Numbat"
  strategy:
    maxParallel: '10'
    matrix:
      ': Swift 5.9':
        image: swift:5.9-focal
      ': Swift 5.10':
        image: swift:5.10-noble
      ': Swift 6':
        image: swift:6.0-noble
  container: $[ variables['image'] ]
  steps:
    - template: .azure/templates/run-make.yml
      parameters:
        rule: spm_build_plugins

- job: Jazzy
  pool:
    vmImage: 'macOS-14'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_15.4.app
  steps:
    - script: make docs
      displayName: Run Jazzy
    - script: >
        if ruby -rjson -e "j = JSON.parse(File.read('docs/undocumented.json')); exit j['warnings'].length != 0"; then
          echo "Undocumented declarations:"
          cat docs/undocumented.json
          exit 1
        fi
      displayName: Validate documentation coverage
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'API Docs'
        targetPath: 'docs'
      displayName: Publish API docs
    - task: DownloadSecureFile@1
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      inputs:
        secureFile: doc_deploy_key
      displayName: Download deploy key
    - script: ./tools/push-docs
      displayName: Push documentation to GitHub Pages
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
